// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0] hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]  hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]  hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]  hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]  hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]  hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]  hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire        hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire        hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0] hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [31:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [3:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire        hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire        hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire        hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0] hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]  hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire        hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire        hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0] hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0] hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]  hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]  hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]  hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]  hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]  hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]  hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire        hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire        hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0] hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [31:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]  hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire        hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire        hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire        hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire        pll_0_outclk0_clk,                                                //                                              pll_0_outclk0.clk
		input  wire        pll_0_outclk1_clk,                                                //                                              pll_0_outclk1.clk
		input  wire        Encoder_0_reset_sink_reset_bridge_in_reset_reset,                 //                 Encoder_0_reset_sink_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_0_reset_reset_bridge_in_reset_reset,             //             sdram_controller_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] Encoder_0_avalon_master_address,                                  //                                    Encoder_0_avalon_master.address
		output wire        Encoder_0_avalon_master_waitrequest,                              //                                                           .waitrequest
		input  wire        Encoder_0_avalon_master_read,                                     //                                                           .read
		output wire [7:0]  Encoder_0_avalon_master_readdata,                                 //                                                           .readdata
		input  wire        Encoder_0_avalon_master_write,                                    //                                                           .write
		input  wire [7:0]  Encoder_0_avalon_master_writedata,                                //                                                           .writedata
		output wire [2:0]  Encoder_0_avalon_slave_address,                                   //                                     Encoder_0_avalon_slave.address
		output wire        Encoder_0_avalon_slave_write,                                     //                                                           .write
		output wire        Encoder_0_avalon_slave_read,                                      //                                                           .read
		input  wire [31:0] Encoder_0_avalon_slave_readdata,                                  //                                                           .readdata
		output wire [31:0] Encoder_0_avalon_slave_writedata,                                 //                                                           .writedata
		output wire        Encoder_0_avalon_slave_chipselect,                                //                                                           .chipselect
		output wire [2:0]  gpio_pio_s1_address,                                              //                                                gpio_pio_s1.address
		output wire        gpio_pio_s1_write,                                                //                                                           .write
		input  wire [31:0] gpio_pio_s1_readdata,                                             //                                                           .readdata
		output wire [31:0] gpio_pio_s1_writedata,                                            //                                                           .writedata
		output wire        gpio_pio_s1_chipselect,                                           //                                                           .chipselect
		output wire [2:0]  led_pio_s1_address,                                               //                                                 led_pio_s1.address
		output wire        led_pio_s1_write,                                                 //                                                           .write
		input  wire [31:0] led_pio_s1_readdata,                                              //                                                           .readdata
		output wire [31:0] led_pio_s1_writedata,                                             //                                                           .writedata
		output wire        led_pio_s1_chipselect,                                            //                                                           .chipselect
		output wire [24:0] sdram_controller_0_s1_address,                                    //                                      sdram_controller_0_s1.address
		output wire        sdram_controller_0_s1_write,                                      //                                                           .write
		output wire        sdram_controller_0_s1_read,                                       //                                                           .read
		input  wire [15:0] sdram_controller_0_s1_readdata,                                   //                                                           .readdata
		output wire [15:0] sdram_controller_0_s1_writedata,                                  //                                                           .writedata
		output wire [1:0]  sdram_controller_0_s1_byteenable,                                 //                                                           .byteenable
		input  wire        sdram_controller_0_s1_readdatavalid,                              //                                                           .readdatavalid
		input  wire        sdram_controller_0_s1_waitrequest,                                //                                                           .waitrequest
		output wire        sdram_controller_0_s1_chipselect                                  //                                                           .chipselect
	);

	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_waitrequest;             // Encoder_0_avalon_master_agent:av_waitrequest -> Encoder_0_avalon_master_translator:uav_waitrequest
	wire    [7:0] encoder_0_avalon_master_translator_avalon_universal_master_0_readdata;                // Encoder_0_avalon_master_agent:av_readdata -> Encoder_0_avalon_master_translator:uav_readdata
	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_debugaccess;             // Encoder_0_avalon_master_translator:uav_debugaccess -> Encoder_0_avalon_master_agent:av_debugaccess
	wire   [31:0] encoder_0_avalon_master_translator_avalon_universal_master_0_address;                 // Encoder_0_avalon_master_translator:uav_address -> Encoder_0_avalon_master_agent:av_address
	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_read;                    // Encoder_0_avalon_master_translator:uav_read -> Encoder_0_avalon_master_agent:av_read
	wire    [0:0] encoder_0_avalon_master_translator_avalon_universal_master_0_byteenable;              // Encoder_0_avalon_master_translator:uav_byteenable -> Encoder_0_avalon_master_agent:av_byteenable
	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;           // Encoder_0_avalon_master_agent:av_readdatavalid -> Encoder_0_avalon_master_translator:uav_readdatavalid
	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_lock;                    // Encoder_0_avalon_master_translator:uav_lock -> Encoder_0_avalon_master_agent:av_lock
	wire          encoder_0_avalon_master_translator_avalon_universal_master_0_write;                   // Encoder_0_avalon_master_translator:uav_write -> Encoder_0_avalon_master_agent:av_write
	wire    [7:0] encoder_0_avalon_master_translator_avalon_universal_master_0_writedata;               // Encoder_0_avalon_master_translator:uav_writedata -> Encoder_0_avalon_master_agent:av_writedata
	wire    [0:0] encoder_0_avalon_master_translator_avalon_universal_master_0_burstcount;              // Encoder_0_avalon_master_translator:uav_burstcount -> Encoder_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                // rsp_mux_002:src_valid -> Encoder_0_avalon_master_agent:rp_valid
	wire   [97:0] rsp_mux_002_src_data;                                                                 // rsp_mux_002:src_data -> Encoder_0_avalon_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                // Encoder_0_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                                              // rsp_mux_002:src_channel -> Encoder_0_avalon_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                        // rsp_mux_002:src_startofpacket -> Encoder_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                          // rsp_mux_002:src_endofpacket -> Encoder_0_avalon_master_agent:rp_endofpacket
	wire   [15:0] sdram_controller_0_s1_agent_m0_readdata;                                              // sdram_controller_0_s1_translator:uav_readdata -> sdram_controller_0_s1_agent:m0_readdata
	wire          sdram_controller_0_s1_agent_m0_waitrequest;                                           // sdram_controller_0_s1_translator:uav_waitrequest -> sdram_controller_0_s1_agent:m0_waitrequest
	wire          sdram_controller_0_s1_agent_m0_debugaccess;                                           // sdram_controller_0_s1_agent:m0_debugaccess -> sdram_controller_0_s1_translator:uav_debugaccess
	wire   [31:0] sdram_controller_0_s1_agent_m0_address;                                               // sdram_controller_0_s1_agent:m0_address -> sdram_controller_0_s1_translator:uav_address
	wire    [1:0] sdram_controller_0_s1_agent_m0_byteenable;                                            // sdram_controller_0_s1_agent:m0_byteenable -> sdram_controller_0_s1_translator:uav_byteenable
	wire          sdram_controller_0_s1_agent_m0_read;                                                  // sdram_controller_0_s1_agent:m0_read -> sdram_controller_0_s1_translator:uav_read
	wire          sdram_controller_0_s1_agent_m0_readdatavalid;                                         // sdram_controller_0_s1_translator:uav_readdatavalid -> sdram_controller_0_s1_agent:m0_readdatavalid
	wire          sdram_controller_0_s1_agent_m0_lock;                                                  // sdram_controller_0_s1_agent:m0_lock -> sdram_controller_0_s1_translator:uav_lock
	wire   [15:0] sdram_controller_0_s1_agent_m0_writedata;                                             // sdram_controller_0_s1_agent:m0_writedata -> sdram_controller_0_s1_translator:uav_writedata
	wire          sdram_controller_0_s1_agent_m0_write;                                                 // sdram_controller_0_s1_agent:m0_write -> sdram_controller_0_s1_translator:uav_write
	wire    [1:0] sdram_controller_0_s1_agent_m0_burstcount;                                            // sdram_controller_0_s1_agent:m0_burstcount -> sdram_controller_0_s1_translator:uav_burstcount
	wire          sdram_controller_0_s1_agent_rf_source_valid;                                          // sdram_controller_0_s1_agent:rf_source_valid -> sdram_controller_0_s1_agent_rsp_fifo:in_valid
	wire  [107:0] sdram_controller_0_s1_agent_rf_source_data;                                           // sdram_controller_0_s1_agent:rf_source_data -> sdram_controller_0_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_0_s1_agent_rf_source_ready;                                          // sdram_controller_0_s1_agent_rsp_fifo:in_ready -> sdram_controller_0_s1_agent:rf_source_ready
	wire          sdram_controller_0_s1_agent_rf_source_startofpacket;                                  // sdram_controller_0_s1_agent:rf_source_startofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_0_s1_agent_rf_source_endofpacket;                                    // sdram_controller_0_s1_agent:rf_source_endofpacket -> sdram_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_valid;                                       // sdram_controller_0_s1_agent_rsp_fifo:out_valid -> sdram_controller_0_s1_agent:rf_sink_valid
	wire  [107:0] sdram_controller_0_s1_agent_rsp_fifo_out_data;                                        // sdram_controller_0_s1_agent_rsp_fifo:out_data -> sdram_controller_0_s1_agent:rf_sink_data
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_ready;                                       // sdram_controller_0_s1_agent:rf_sink_ready -> sdram_controller_0_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket;                               // sdram_controller_0_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_0_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket;                                 // sdram_controller_0_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_0_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_valid;                                     // sdram_controller_0_s1_agent:rdata_fifo_src_valid -> sdram_controller_0_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_src_data;                                      // sdram_controller_0_s1_agent:rdata_fifo_src_data -> sdram_controller_0_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_src_ready;                                     // sdram_controller_0_s1_agent_rdata_fifo:in_ready -> sdram_controller_0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] encoder_0_avalon_slave_agent_m0_readdata;                                             // Encoder_0_avalon_slave_translator:uav_readdata -> Encoder_0_avalon_slave_agent:m0_readdata
	wire          encoder_0_avalon_slave_agent_m0_waitrequest;                                          // Encoder_0_avalon_slave_translator:uav_waitrequest -> Encoder_0_avalon_slave_agent:m0_waitrequest
	wire          encoder_0_avalon_slave_agent_m0_debugaccess;                                          // Encoder_0_avalon_slave_agent:m0_debugaccess -> Encoder_0_avalon_slave_translator:uav_debugaccess
	wire   [31:0] encoder_0_avalon_slave_agent_m0_address;                                              // Encoder_0_avalon_slave_agent:m0_address -> Encoder_0_avalon_slave_translator:uav_address
	wire    [3:0] encoder_0_avalon_slave_agent_m0_byteenable;                                           // Encoder_0_avalon_slave_agent:m0_byteenable -> Encoder_0_avalon_slave_translator:uav_byteenable
	wire          encoder_0_avalon_slave_agent_m0_read;                                                 // Encoder_0_avalon_slave_agent:m0_read -> Encoder_0_avalon_slave_translator:uav_read
	wire          encoder_0_avalon_slave_agent_m0_readdatavalid;                                        // Encoder_0_avalon_slave_translator:uav_readdatavalid -> Encoder_0_avalon_slave_agent:m0_readdatavalid
	wire          encoder_0_avalon_slave_agent_m0_lock;                                                 // Encoder_0_avalon_slave_agent:m0_lock -> Encoder_0_avalon_slave_translator:uav_lock
	wire   [31:0] encoder_0_avalon_slave_agent_m0_writedata;                                            // Encoder_0_avalon_slave_agent:m0_writedata -> Encoder_0_avalon_slave_translator:uav_writedata
	wire          encoder_0_avalon_slave_agent_m0_write;                                                // Encoder_0_avalon_slave_agent:m0_write -> Encoder_0_avalon_slave_translator:uav_write
	wire    [2:0] encoder_0_avalon_slave_agent_m0_burstcount;                                           // Encoder_0_avalon_slave_agent:m0_burstcount -> Encoder_0_avalon_slave_translator:uav_burstcount
	wire          encoder_0_avalon_slave_agent_rf_source_valid;                                         // Encoder_0_avalon_slave_agent:rf_source_valid -> Encoder_0_avalon_slave_agent_rsp_fifo:in_valid
	wire  [125:0] encoder_0_avalon_slave_agent_rf_source_data;                                          // Encoder_0_avalon_slave_agent:rf_source_data -> Encoder_0_avalon_slave_agent_rsp_fifo:in_data
	wire          encoder_0_avalon_slave_agent_rf_source_ready;                                         // Encoder_0_avalon_slave_agent_rsp_fifo:in_ready -> Encoder_0_avalon_slave_agent:rf_source_ready
	wire          encoder_0_avalon_slave_agent_rf_source_startofpacket;                                 // Encoder_0_avalon_slave_agent:rf_source_startofpacket -> Encoder_0_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          encoder_0_avalon_slave_agent_rf_source_endofpacket;                                   // Encoder_0_avalon_slave_agent:rf_source_endofpacket -> Encoder_0_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          encoder_0_avalon_slave_agent_rsp_fifo_out_valid;                                      // Encoder_0_avalon_slave_agent_rsp_fifo:out_valid -> Encoder_0_avalon_slave_agent:rf_sink_valid
	wire  [125:0] encoder_0_avalon_slave_agent_rsp_fifo_out_data;                                       // Encoder_0_avalon_slave_agent_rsp_fifo:out_data -> Encoder_0_avalon_slave_agent:rf_sink_data
	wire          encoder_0_avalon_slave_agent_rsp_fifo_out_ready;                                      // Encoder_0_avalon_slave_agent:rf_sink_ready -> Encoder_0_avalon_slave_agent_rsp_fifo:out_ready
	wire          encoder_0_avalon_slave_agent_rsp_fifo_out_startofpacket;                              // Encoder_0_avalon_slave_agent_rsp_fifo:out_startofpacket -> Encoder_0_avalon_slave_agent:rf_sink_startofpacket
	wire          encoder_0_avalon_slave_agent_rsp_fifo_out_endofpacket;                                // Encoder_0_avalon_slave_agent_rsp_fifo:out_endofpacket -> Encoder_0_avalon_slave_agent:rf_sink_endofpacket
	wire          encoder_0_avalon_slave_agent_rdata_fifo_src_valid;                                    // Encoder_0_avalon_slave_agent:rdata_fifo_src_valid -> Encoder_0_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] encoder_0_avalon_slave_agent_rdata_fifo_src_data;                                     // Encoder_0_avalon_slave_agent:rdata_fifo_src_data -> Encoder_0_avalon_slave_agent_rdata_fifo:in_data
	wire          encoder_0_avalon_slave_agent_rdata_fifo_src_ready;                                    // Encoder_0_avalon_slave_agent_rdata_fifo:in_ready -> Encoder_0_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] gpio_pio_s1_agent_m0_readdata;                                                        // gpio_pio_s1_translator:uav_readdata -> gpio_pio_s1_agent:m0_readdata
	wire          gpio_pio_s1_agent_m0_waitrequest;                                                     // gpio_pio_s1_translator:uav_waitrequest -> gpio_pio_s1_agent:m0_waitrequest
	wire          gpio_pio_s1_agent_m0_debugaccess;                                                     // gpio_pio_s1_agent:m0_debugaccess -> gpio_pio_s1_translator:uav_debugaccess
	wire   [31:0] gpio_pio_s1_agent_m0_address;                                                         // gpio_pio_s1_agent:m0_address -> gpio_pio_s1_translator:uav_address
	wire    [3:0] gpio_pio_s1_agent_m0_byteenable;                                                      // gpio_pio_s1_agent:m0_byteenable -> gpio_pio_s1_translator:uav_byteenable
	wire          gpio_pio_s1_agent_m0_read;                                                            // gpio_pio_s1_agent:m0_read -> gpio_pio_s1_translator:uav_read
	wire          gpio_pio_s1_agent_m0_readdatavalid;                                                   // gpio_pio_s1_translator:uav_readdatavalid -> gpio_pio_s1_agent:m0_readdatavalid
	wire          gpio_pio_s1_agent_m0_lock;                                                            // gpio_pio_s1_agent:m0_lock -> gpio_pio_s1_translator:uav_lock
	wire   [31:0] gpio_pio_s1_agent_m0_writedata;                                                       // gpio_pio_s1_agent:m0_writedata -> gpio_pio_s1_translator:uav_writedata
	wire          gpio_pio_s1_agent_m0_write;                                                           // gpio_pio_s1_agent:m0_write -> gpio_pio_s1_translator:uav_write
	wire    [2:0] gpio_pio_s1_agent_m0_burstcount;                                                      // gpio_pio_s1_agent:m0_burstcount -> gpio_pio_s1_translator:uav_burstcount
	wire          gpio_pio_s1_agent_rf_source_valid;                                                    // gpio_pio_s1_agent:rf_source_valid -> gpio_pio_s1_agent_rsp_fifo:in_valid
	wire  [125:0] gpio_pio_s1_agent_rf_source_data;                                                     // gpio_pio_s1_agent:rf_source_data -> gpio_pio_s1_agent_rsp_fifo:in_data
	wire          gpio_pio_s1_agent_rf_source_ready;                                                    // gpio_pio_s1_agent_rsp_fifo:in_ready -> gpio_pio_s1_agent:rf_source_ready
	wire          gpio_pio_s1_agent_rf_source_startofpacket;                                            // gpio_pio_s1_agent:rf_source_startofpacket -> gpio_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          gpio_pio_s1_agent_rf_source_endofpacket;                                              // gpio_pio_s1_agent:rf_source_endofpacket -> gpio_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          gpio_pio_s1_agent_rsp_fifo_out_valid;                                                 // gpio_pio_s1_agent_rsp_fifo:out_valid -> gpio_pio_s1_agent:rf_sink_valid
	wire  [125:0] gpio_pio_s1_agent_rsp_fifo_out_data;                                                  // gpio_pio_s1_agent_rsp_fifo:out_data -> gpio_pio_s1_agent:rf_sink_data
	wire          gpio_pio_s1_agent_rsp_fifo_out_ready;                                                 // gpio_pio_s1_agent:rf_sink_ready -> gpio_pio_s1_agent_rsp_fifo:out_ready
	wire          gpio_pio_s1_agent_rsp_fifo_out_startofpacket;                                         // gpio_pio_s1_agent_rsp_fifo:out_startofpacket -> gpio_pio_s1_agent:rf_sink_startofpacket
	wire          gpio_pio_s1_agent_rsp_fifo_out_endofpacket;                                           // gpio_pio_s1_agent_rsp_fifo:out_endofpacket -> gpio_pio_s1_agent:rf_sink_endofpacket
	wire          gpio_pio_s1_agent_rdata_fifo_src_valid;                                               // gpio_pio_s1_agent:rdata_fifo_src_valid -> gpio_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] gpio_pio_s1_agent_rdata_fifo_src_data;                                                // gpio_pio_s1_agent:rdata_fifo_src_data -> gpio_pio_s1_agent_rdata_fifo:in_data
	wire          gpio_pio_s1_agent_rdata_fifo_src_ready;                                               // gpio_pio_s1_agent_rdata_fifo:in_ready -> gpio_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] led_pio_s1_agent_m0_readdata;                                                         // led_pio_s1_translator:uav_readdata -> led_pio_s1_agent:m0_readdata
	wire          led_pio_s1_agent_m0_waitrequest;                                                      // led_pio_s1_translator:uav_waitrequest -> led_pio_s1_agent:m0_waitrequest
	wire          led_pio_s1_agent_m0_debugaccess;                                                      // led_pio_s1_agent:m0_debugaccess -> led_pio_s1_translator:uav_debugaccess
	wire   [31:0] led_pio_s1_agent_m0_address;                                                          // led_pio_s1_agent:m0_address -> led_pio_s1_translator:uav_address
	wire    [3:0] led_pio_s1_agent_m0_byteenable;                                                       // led_pio_s1_agent:m0_byteenable -> led_pio_s1_translator:uav_byteenable
	wire          led_pio_s1_agent_m0_read;                                                             // led_pio_s1_agent:m0_read -> led_pio_s1_translator:uav_read
	wire          led_pio_s1_agent_m0_readdatavalid;                                                    // led_pio_s1_translator:uav_readdatavalid -> led_pio_s1_agent:m0_readdatavalid
	wire          led_pio_s1_agent_m0_lock;                                                             // led_pio_s1_agent:m0_lock -> led_pio_s1_translator:uav_lock
	wire   [31:0] led_pio_s1_agent_m0_writedata;                                                        // led_pio_s1_agent:m0_writedata -> led_pio_s1_translator:uav_writedata
	wire          led_pio_s1_agent_m0_write;                                                            // led_pio_s1_agent:m0_write -> led_pio_s1_translator:uav_write
	wire    [2:0] led_pio_s1_agent_m0_burstcount;                                                       // led_pio_s1_agent:m0_burstcount -> led_pio_s1_translator:uav_burstcount
	wire          led_pio_s1_agent_rf_source_valid;                                                     // led_pio_s1_agent:rf_source_valid -> led_pio_s1_agent_rsp_fifo:in_valid
	wire  [125:0] led_pio_s1_agent_rf_source_data;                                                      // led_pio_s1_agent:rf_source_data -> led_pio_s1_agent_rsp_fifo:in_data
	wire          led_pio_s1_agent_rf_source_ready;                                                     // led_pio_s1_agent_rsp_fifo:in_ready -> led_pio_s1_agent:rf_source_ready
	wire          led_pio_s1_agent_rf_source_startofpacket;                                             // led_pio_s1_agent:rf_source_startofpacket -> led_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          led_pio_s1_agent_rf_source_endofpacket;                                               // led_pio_s1_agent:rf_source_endofpacket -> led_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_valid;                                                  // led_pio_s1_agent_rsp_fifo:out_valid -> led_pio_s1_agent:rf_sink_valid
	wire  [125:0] led_pio_s1_agent_rsp_fifo_out_data;                                                   // led_pio_s1_agent_rsp_fifo:out_data -> led_pio_s1_agent:rf_sink_data
	wire          led_pio_s1_agent_rsp_fifo_out_ready;                                                  // led_pio_s1_agent:rf_sink_ready -> led_pio_s1_agent_rsp_fifo:out_ready
	wire          led_pio_s1_agent_rsp_fifo_out_startofpacket;                                          // led_pio_s1_agent_rsp_fifo:out_startofpacket -> led_pio_s1_agent:rf_sink_startofpacket
	wire          led_pio_s1_agent_rsp_fifo_out_endofpacket;                                            // led_pio_s1_agent_rsp_fifo:out_endofpacket -> led_pio_s1_agent:rf_sink_endofpacket
	wire          led_pio_s1_agent_rdata_fifo_src_valid;                                                // led_pio_s1_agent:rdata_fifo_src_valid -> led_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_src_data;                                                 // led_pio_s1_agent:rdata_fifo_src_data -> led_pio_s1_agent_rdata_fifo:in_data
	wire          led_pio_s1_agent_rdata_fifo_src_ready;                                                // led_pio_s1_agent_rdata_fifo:in_ready -> led_pio_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                            // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [124:0] hps_0_h2f_axi_master_agent_write_cp_data;                                             // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                            // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                    // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                      // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                             // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [124:0] hps_0_h2f_axi_master_agent_read_cp_data;                                              // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                             // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                     // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                       // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          encoder_0_avalon_master_agent_cp_valid;                                               // Encoder_0_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire   [97:0] encoder_0_avalon_master_agent_cp_data;                                                // Encoder_0_avalon_master_agent:cp_data -> router_002:sink_data
	wire          encoder_0_avalon_master_agent_cp_ready;                                               // router_002:sink_ready -> Encoder_0_avalon_master_agent:cp_ready
	wire          encoder_0_avalon_master_agent_cp_startofpacket;                                       // Encoder_0_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          encoder_0_avalon_master_agent_cp_endofpacket;                                         // Encoder_0_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                 // router_002:src_valid -> cmd_demux_002:sink_valid
	wire   [97:0] router_002_src_data;                                                                  // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                 // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                               // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                         // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                           // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sdram_controller_0_s1_agent_rp_valid;                                                 // sdram_controller_0_s1_agent:rp_valid -> router_003:sink_valid
	wire  [106:0] sdram_controller_0_s1_agent_rp_data;                                                  // sdram_controller_0_s1_agent:rp_data -> router_003:sink_data
	wire          sdram_controller_0_s1_agent_rp_ready;                                                 // router_003:sink_ready -> sdram_controller_0_s1_agent:rp_ready
	wire          sdram_controller_0_s1_agent_rp_startofpacket;                                         // sdram_controller_0_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sdram_controller_0_s1_agent_rp_endofpacket;                                           // sdram_controller_0_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                 // router_003:src_valid -> rsp_demux:sink_valid
	wire  [106:0] router_003_src_data;                                                                  // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                 // rsp_demux:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                               // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                         // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                           // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          encoder_0_avalon_slave_agent_rp_valid;                                                // Encoder_0_avalon_slave_agent:rp_valid -> router_004:sink_valid
	wire  [124:0] encoder_0_avalon_slave_agent_rp_data;                                                 // Encoder_0_avalon_slave_agent:rp_data -> router_004:sink_data
	wire          encoder_0_avalon_slave_agent_rp_ready;                                                // router_004:sink_ready -> Encoder_0_avalon_slave_agent:rp_ready
	wire          encoder_0_avalon_slave_agent_rp_startofpacket;                                        // Encoder_0_avalon_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          encoder_0_avalon_slave_agent_rp_endofpacket;                                          // Encoder_0_avalon_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                 // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [124:0] router_004_src_data;                                                                  // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                 // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                               // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                         // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                           // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          gpio_pio_s1_agent_rp_valid;                                                           // gpio_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [124:0] gpio_pio_s1_agent_rp_data;                                                            // gpio_pio_s1_agent:rp_data -> router_005:sink_data
	wire          gpio_pio_s1_agent_rp_ready;                                                           // router_005:sink_ready -> gpio_pio_s1_agent:rp_ready
	wire          gpio_pio_s1_agent_rp_startofpacket;                                                   // gpio_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          gpio_pio_s1_agent_rp_endofpacket;                                                     // gpio_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                 // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [124:0] router_005_src_data;                                                                  // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                 // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                               // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                         // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                           // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          led_pio_s1_agent_rp_valid;                                                            // led_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [124:0] led_pio_s1_agent_rp_data;                                                             // led_pio_s1_agent:rp_data -> router_006:sink_data
	wire          led_pio_s1_agent_rp_ready;                                                            // router_006:sink_ready -> led_pio_s1_agent:rp_ready
	wire          led_pio_s1_agent_rp_startofpacket;                                                    // led_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          led_pio_s1_agent_rp_endofpacket;                                                      // led_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                 // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [124:0] router_006_src_data;                                                                  // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                 // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                                               // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                         // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                           // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                                     // router:src_valid -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [124:0] router_src_data;                                                                      // router:src_data -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                     // hps_0_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                                   // router:src_channel -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                             // router:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                               // router:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_data;                                         // hps_0_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_ready;                                        // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_cmd_src_channel;                                      // hps_0_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                // hps_0_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                  // hps_0_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                    // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_src_data;                                                                     // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                    // hps_0_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                                  // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                            // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                              // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_valid;                                        // hps_0_h2f_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [124:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_data;                                         // hps_0_h2f_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_ready;                                        // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_rsp_src_channel;                                      // hps_0_h2f_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                // hps_0_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                  // hps_0_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                 // router_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [124:0] router_001_src_data;                                                                  // router_001:src_data -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                 // hps_0_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                               // router_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                         // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                           // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [124:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_data;                                         // hps_0_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_ready;                                        // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_cmd_src_channel;                                      // hps_0_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                // hps_0_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                  // hps_0_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_001_src_data;                                                                 // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                // hps_0_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                              // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                        // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                          // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_valid;                                        // hps_0_h2f_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [124:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_data;                                         // hps_0_h2f_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_ready;                                        // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_rsp_src_channel;                                      // hps_0_h2f_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                // hps_0_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                  // hps_0_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                    // cmd_mux:src_valid -> sdram_controller_0_s1_burst_adapter:sink0_valid
	wire  [106:0] cmd_mux_src_data;                                                                     // cmd_mux:src_data -> sdram_controller_0_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                    // sdram_controller_0_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                                  // cmd_mux:src_channel -> sdram_controller_0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                            // cmd_mux:src_startofpacket -> sdram_controller_0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                              // cmd_mux:src_endofpacket -> sdram_controller_0_s1_burst_adapter:sink0_endofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_valid;                                    // sdram_controller_0_s1_burst_adapter:source0_valid -> sdram_controller_0_s1_agent:cp_valid
	wire  [106:0] sdram_controller_0_s1_burst_adapter_source0_data;                                     // sdram_controller_0_s1_burst_adapter:source0_data -> sdram_controller_0_s1_agent:cp_data
	wire          sdram_controller_0_s1_burst_adapter_source0_ready;                                    // sdram_controller_0_s1_agent:cp_ready -> sdram_controller_0_s1_burst_adapter:source0_ready
	wire    [3:0] sdram_controller_0_s1_burst_adapter_source0_channel;                                  // sdram_controller_0_s1_burst_adapter:source0_channel -> sdram_controller_0_s1_agent:cp_channel
	wire          sdram_controller_0_s1_burst_adapter_source0_startofpacket;                            // sdram_controller_0_s1_burst_adapter:source0_startofpacket -> sdram_controller_0_s1_agent:cp_startofpacket
	wire          sdram_controller_0_s1_burst_adapter_source0_endofpacket;                              // sdram_controller_0_s1_burst_adapter:source0_endofpacket -> sdram_controller_0_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                // cmd_mux_001:src_valid -> Encoder_0_avalon_slave_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_001_src_data;                                                                 // cmd_mux_001:src_data -> Encoder_0_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                // Encoder_0_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                              // cmd_mux_001:src_channel -> Encoder_0_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                        // cmd_mux_001:src_startofpacket -> Encoder_0_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                          // cmd_mux_001:src_endofpacket -> Encoder_0_avalon_slave_burst_adapter:sink0_endofpacket
	wire          encoder_0_avalon_slave_burst_adapter_source0_valid;                                   // Encoder_0_avalon_slave_burst_adapter:source0_valid -> Encoder_0_avalon_slave_agent:cp_valid
	wire  [124:0] encoder_0_avalon_slave_burst_adapter_source0_data;                                    // Encoder_0_avalon_slave_burst_adapter:source0_data -> Encoder_0_avalon_slave_agent:cp_data
	wire          encoder_0_avalon_slave_burst_adapter_source0_ready;                                   // Encoder_0_avalon_slave_agent:cp_ready -> Encoder_0_avalon_slave_burst_adapter:source0_ready
	wire    [3:0] encoder_0_avalon_slave_burst_adapter_source0_channel;                                 // Encoder_0_avalon_slave_burst_adapter:source0_channel -> Encoder_0_avalon_slave_agent:cp_channel
	wire          encoder_0_avalon_slave_burst_adapter_source0_startofpacket;                           // Encoder_0_avalon_slave_burst_adapter:source0_startofpacket -> Encoder_0_avalon_slave_agent:cp_startofpacket
	wire          encoder_0_avalon_slave_burst_adapter_source0_endofpacket;                             // Encoder_0_avalon_slave_burst_adapter:source0_endofpacket -> Encoder_0_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                // cmd_mux_002:src_valid -> gpio_pio_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_002_src_data;                                                                 // cmd_mux_002:src_data -> gpio_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                // gpio_pio_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                              // cmd_mux_002:src_channel -> gpio_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                        // cmd_mux_002:src_startofpacket -> gpio_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                          // cmd_mux_002:src_endofpacket -> gpio_pio_s1_burst_adapter:sink0_endofpacket
	wire          gpio_pio_s1_burst_adapter_source0_valid;                                              // gpio_pio_s1_burst_adapter:source0_valid -> gpio_pio_s1_agent:cp_valid
	wire  [124:0] gpio_pio_s1_burst_adapter_source0_data;                                               // gpio_pio_s1_burst_adapter:source0_data -> gpio_pio_s1_agent:cp_data
	wire          gpio_pio_s1_burst_adapter_source0_ready;                                              // gpio_pio_s1_agent:cp_ready -> gpio_pio_s1_burst_adapter:source0_ready
	wire    [3:0] gpio_pio_s1_burst_adapter_source0_channel;                                            // gpio_pio_s1_burst_adapter:source0_channel -> gpio_pio_s1_agent:cp_channel
	wire          gpio_pio_s1_burst_adapter_source0_startofpacket;                                      // gpio_pio_s1_burst_adapter:source0_startofpacket -> gpio_pio_s1_agent:cp_startofpacket
	wire          gpio_pio_s1_burst_adapter_source0_endofpacket;                                        // gpio_pio_s1_burst_adapter:source0_endofpacket -> gpio_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                // cmd_mux_003:src_valid -> led_pio_s1_burst_adapter:sink0_valid
	wire  [124:0] cmd_mux_003_src_data;                                                                 // cmd_mux_003:src_data -> led_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                // led_pio_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                              // cmd_mux_003:src_channel -> led_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                        // cmd_mux_003:src_startofpacket -> led_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                          // cmd_mux_003:src_endofpacket -> led_pio_s1_burst_adapter:sink0_endofpacket
	wire          led_pio_s1_burst_adapter_source0_valid;                                               // led_pio_s1_burst_adapter:source0_valid -> led_pio_s1_agent:cp_valid
	wire  [124:0] led_pio_s1_burst_adapter_source0_data;                                                // led_pio_s1_burst_adapter:source0_data -> led_pio_s1_agent:cp_data
	wire          led_pio_s1_burst_adapter_source0_ready;                                               // led_pio_s1_agent:cp_ready -> led_pio_s1_burst_adapter:source0_ready
	wire    [3:0] led_pio_s1_burst_adapter_source0_channel;                                             // led_pio_s1_burst_adapter:source0_channel -> led_pio_s1_agent:cp_channel
	wire          led_pio_s1_burst_adapter_source0_startofpacket;                                       // led_pio_s1_burst_adapter:source0_startofpacket -> led_pio_s1_agent:cp_startofpacket
	wire          led_pio_s1_burst_adapter_source0_endofpacket;                                         // led_pio_s1_burst_adapter:source0_endofpacket -> led_pio_s1_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] cmd_demux_src1_data;                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] cmd_demux_src2_data;                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [124:0] cmd_demux_src3_data;                                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                             // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [124:0] cmd_demux_001_src1_data;                                                              // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                                           // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                             // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [124:0] cmd_demux_001_src2_data;                                                              // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                                           // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                     // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                       // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                             // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [124:0] cmd_demux_001_src3_data;                                                              // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                             // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                                           // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                     // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                       // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [124:0] rsp_demux_001_src0_data;                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [124:0] rsp_demux_001_src1_data;                                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                             // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [124:0] rsp_demux_002_src0_data;                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [124:0] rsp_demux_002_src1_data;                                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                             // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [124:0] rsp_demux_003_src0_data;                                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                             // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [124:0] rsp_demux_003_src1_data;                                                              // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                             // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                                           // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                     // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                       // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          cmd_demux_src0_valid;                                                                 // cmd_demux:src0_valid -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_src0_data;                                                                  // cmd_demux:src0_data -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                 // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                               // cmd_demux:src0_channel -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                         // cmd_demux:src0_startofpacket -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                           // cmd_demux:src0_endofpacket -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_001_src0_valid;                                                             // cmd_demux_001:src0_valid -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_valid
	wire  [124:0] cmd_demux_001_src0_data;                                                              // cmd_demux_001:src0_data -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                             // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                           // cmd_demux_001:src0_channel -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                     // cmd_demux_001:src0_startofpacket -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                       // cmd_demux_001:src0_endofpacket -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          cmd_demux_002_src0_valid;                                                             // cmd_demux_002:src0_valid -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_valid
	wire   [97:0] cmd_demux_002_src0_data;                                                              // cmd_demux_002:src0_data -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                             // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                                           // cmd_demux_002:src0_channel -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                     // cmd_demux_002:src0_startofpacket -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                       // cmd_demux_002:src0_endofpacket -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:in_endofpacket
	wire          rsp_demux_src0_valid;                                                                 // rsp_demux:src0_valid -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [106:0] rsp_demux_src0_data;                                                                  // rsp_demux:src0_data -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                 // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                               // rsp_demux:src0_channel -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                         // rsp_demux:src0_startofpacket -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                           // rsp_demux:src0_endofpacket -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src1_valid;                                                                 // rsp_demux:src1_valid -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [106:0] rsp_demux_src1_data;                                                                  // rsp_demux:src1_data -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                 // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                               // rsp_demux:src1_channel -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                         // rsp_demux:src1_startofpacket -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                           // rsp_demux:src1_endofpacket -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          rsp_demux_src2_valid;                                                                 // rsp_demux:src2_valid -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_valid
	wire  [106:0] rsp_demux_src2_data;                                                                  // rsp_demux:src2_data -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_data
	wire          rsp_demux_src2_ready;                                                                 // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_ready -> rsp_demux:src2_ready
	wire    [3:0] rsp_demux_src2_channel;                                                               // rsp_demux:src2_channel -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src2_startofpacket;                                                         // rsp_demux:src2_startofpacket -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                           // rsp_demux:src2_endofpacket -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_valid -> crosser:in_valid
	wire  [106:0] hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_data -> crosser:in_data
	wire          hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_ready;         // crosser:in_ready -> hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_channel -> crosser:in_channel
	wire          hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_startofpacket -> crosser:in_startofpacket
	wire          hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter:out_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                    // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [106:0] crosser_out_data;                                                                     // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                    // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [3:0] crosser_out_channel;                                                                  // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                            // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                              // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_valid;         // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_valid -> crosser_001:in_valid
	wire  [106:0] hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_data;          // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_data -> crosser_001:in_data
	wire          hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_ready;         // crosser_001:in_ready -> hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_channel;       // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_channel -> crosser_001:in_channel
	wire          hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket; // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_startofpacket -> crosser_001:in_startofpacket
	wire          hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket;   // hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter:out_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [106:0] crosser_001_out_data;                                                                 // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                                // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [3:0] crosser_001_out_channel;                                                              // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                                        // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                          // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_valid;         // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_valid -> crosser_002:in_valid
	wire  [106:0] encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_data;          // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_data -> crosser_002:in_data
	wire          encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_ready;         // crosser_002:in_ready -> Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_ready
	wire    [3:0] encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_channel;       // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_channel -> crosser_002:in_channel
	wire          encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket; // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_startofpacket -> crosser_002:in_startofpacket
	wire          encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket;   // Encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter:out_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [106:0] crosser_002_out_data;                                                                 // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                                                // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire    [3:0] crosser_002_out_channel;                                                              // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                                        // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                                          // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;         // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> crosser_003:in_valid
	wire  [124:0] sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;          // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> crosser_003:in_data
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;         // crosser_003:in_ready -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [3:0] sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;       // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> crosser_003:in_channel
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket; // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> crosser_003:in_startofpacket
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;   // sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire  [124:0] crosser_003_out_data;                                                                 // crosser_003:out_data -> rsp_mux:sink0_data
	wire          crosser_003_out_ready;                                                                // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire    [3:0] crosser_003_out_channel;                                                              // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire          crosser_003_out_startofpacket;                                                        // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                          // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;         // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> crosser_004:in_valid
	wire  [124:0] sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;          // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> crosser_004:in_data
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;         // crosser_004:in_ready -> sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [3:0] sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;       // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> crosser_004:in_channel
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket; // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> crosser_004:in_startofpacket
	wire          sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;   // sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                // crosser_004:out_valid -> rsp_mux_001:sink0_valid
	wire  [124:0] crosser_004_out_data;                                                                 // crosser_004:out_data -> rsp_mux_001:sink0_data
	wire          crosser_004_out_ready;                                                                // rsp_mux_001:sink0_ready -> crosser_004:out_ready
	wire    [3:0] crosser_004_out_channel;                                                              // crosser_004:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_004_out_startofpacket;                                                        // crosser_004:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                          // crosser_004:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_valid;         // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_valid -> crosser_005:in_valid
	wire   [97:0] sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_data;          // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_data -> crosser_005:in_data
	wire          sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_ready;         // crosser_005:in_ready -> sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_ready
	wire    [3:0] sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_channel;       // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_channel -> crosser_005:in_channel
	wire          sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_startofpacket; // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_startofpacket -> crosser_005:in_startofpacket
	wire          sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_endofpacket;   // sdram_controller_0_s1_to_Encoder_0_avalon_master_rsp_width_adapter:out_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                // crosser_005:out_valid -> rsp_mux_002:sink0_valid
	wire   [97:0] crosser_005_out_data;                                                                 // crosser_005:out_data -> rsp_mux_002:sink0_data
	wire          crosser_005_out_ready;                                                                // rsp_mux_002:sink0_ready -> crosser_005:out_ready
	wire    [3:0] crosser_005_out_channel;                                                              // crosser_005:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_005_out_startofpacket;                                                        // crosser_005:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                          // crosser_005:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire    [3:0] hps_0_h2f_axi_master_wr_limiter_cmd_valid_data;                                       // hps_0_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] hps_0_h2f_axi_master_rd_limiter_cmd_valid_data;                                       // hps_0_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_valid;                                     // sdram_controller_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_controller_0_s1_agent_rdata_fifo_out_data;                                      // sdram_controller_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_controller_0_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter:in_0_ready -> sdram_controller_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                        // avalon_st_adapter:out_0_valid -> sdram_controller_0_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                         // avalon_st_adapter:out_0_data -> sdram_controller_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                        // sdram_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                        // avalon_st_adapter:out_0_error -> sdram_controller_0_s1_agent:rdata_fifo_sink_error
	wire          encoder_0_avalon_slave_agent_rdata_fifo_out_valid;                                    // Encoder_0_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] encoder_0_avalon_slave_agent_rdata_fifo_out_data;                                     // Encoder_0_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          encoder_0_avalon_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_001:in_0_ready -> Encoder_0_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                    // avalon_st_adapter_001:out_0_valid -> Encoder_0_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                     // avalon_st_adapter_001:out_0_data -> Encoder_0_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                    // Encoder_0_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                    // avalon_st_adapter_001:out_0_error -> Encoder_0_avalon_slave_agent:rdata_fifo_sink_error
	wire          gpio_pio_s1_agent_rdata_fifo_out_valid;                                               // gpio_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] gpio_pio_s1_agent_rdata_fifo_out_data;                                                // gpio_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          gpio_pio_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_002:in_0_ready -> gpio_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                    // avalon_st_adapter_002:out_0_valid -> gpio_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                     // avalon_st_adapter_002:out_0_data -> gpio_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                    // gpio_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                    // avalon_st_adapter_002:out_0_error -> gpio_pio_s1_agent:rdata_fifo_sink_error
	wire          led_pio_s1_agent_rdata_fifo_out_valid;                                                // led_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] led_pio_s1_agent_rdata_fifo_out_data;                                                 // led_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          led_pio_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_003:in_0_ready -> led_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                    // avalon_st_adapter_003:out_0_valid -> led_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                     // avalon_st_adapter_003:out_0_data -> led_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                    // led_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                    // avalon_st_adapter_003:out_0_error -> led_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) encoder_0_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                          //                       clk.clk
		.reset                  (Encoder_0_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (encoder_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (encoder_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (encoder_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (encoder_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (encoder_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (encoder_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (encoder_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (encoder_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (encoder_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (encoder_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (encoder_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Encoder_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Encoder_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Encoder_0_avalon_master_read),                                               //                          .read
		.av_readdata            (Encoder_0_avalon_master_readdata),                                           //                          .readdata
		.av_write               (Encoder_0_avalon_master_write),                                              //                          .write
		.av_writedata           (Encoder_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (1'b1),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_0_s1_translator (
		.clk                    (pll_0_outclk1_clk),                                    //                      clk.clk
		.reset                  (sdram_controller_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_0_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_0_s1_write),                          //                         .write
		.av_read                (sdram_controller_0_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_0_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_0_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_0_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_0_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_0_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_0_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) encoder_0_avalon_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                //                      clk.clk
		.reset                  (Encoder_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (encoder_0_avalon_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (encoder_0_avalon_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (encoder_0_avalon_slave_agent_m0_read),             //                         .read
		.uav_write              (encoder_0_avalon_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (encoder_0_avalon_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (encoder_0_avalon_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (encoder_0_avalon_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (encoder_0_avalon_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (encoder_0_avalon_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (encoder_0_avalon_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (encoder_0_avalon_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (Encoder_0_avalon_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (Encoder_0_avalon_slave_write),                     //                         .write
		.av_read                (Encoder_0_avalon_slave_read),                      //                         .read
		.av_readdata            (Encoder_0_avalon_slave_readdata),                  //                         .readdata
		.av_writedata           (Encoder_0_avalon_slave_writedata),                 //                         .writedata
		.av_chipselect          (Encoder_0_avalon_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio_pio_s1_translator (
		.clk                    (pll_0_outclk0_clk),                                //                      clk.clk
		.reset                  (Encoder_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio_pio_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (gpio_pio_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (gpio_pio_s1_agent_m0_read),                        //                         .read
		.uav_write              (gpio_pio_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (gpio_pio_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (gpio_pio_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (gpio_pio_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (gpio_pio_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (gpio_pio_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (gpio_pio_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (gpio_pio_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (gpio_pio_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (gpio_pio_s1_write),                                //                         .write
		.av_readdata            (gpio_pio_s1_readdata),                             //                         .readdata
		.av_writedata           (gpio_pio_s1_writedata),                            //                         .writedata
		.av_chipselect          (gpio_pio_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_pio_s1_translator (
		.clk                    (pll_0_outclk0_clk),                                //                      clk.clk
		.reset                  (Encoder_0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_pio_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (led_pio_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (led_pio_s1_agent_m0_read),                         //                         .read
		.uav_write              (led_pio_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (led_pio_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (led_pio_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (led_pio_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (led_pio_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (led_pio_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (led_pio_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (led_pio_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (led_pio_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (led_pio_s1_write),                                 //                         .write
		.av_readdata            (led_pio_s1_readdata),                              //                         .readdata
		.av_writedata           (led_pio_s1_writedata),                             //                         .writedata
		.av_chipselect          (led_pio_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (95),
		.PKT_CACHE_H               (119),
		.PKT_CACHE_L               (116),
		.PKT_ADDR_SIDEBAND_H       (93),
		.PKT_ADDR_SIDEBAND_L       (93),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_THREAD_ID_H           (112),
		.PKT_THREAD_ID_L           (101),
		.PKT_QOS_L                 (96),
		.PKT_QOS_H                 (96),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_DATA_SIDEBAND_H       (94),
		.PKT_DATA_SIDEBAND_L       (94),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.ID                        (1)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (pll_0_outclk0_clk),                                                 //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (97),
		.PKT_ORI_BURST_SIZE_L      (95),
		.PKT_RESPONSE_STATUS_H     (94),
		.PKT_RESPONSE_STATUS_L     (93),
		.PKT_QOS_H                 (69),
		.PKT_QOS_L                 (69),
		.PKT_DATA_SIDEBAND_H       (67),
		.PKT_DATA_SIDEBAND_L       (67),
		.PKT_ADDR_SIDEBAND_H       (66),
		.PKT_ADDR_SIDEBAND_L       (66),
		.PKT_BURST_TYPE_H          (65),
		.PKT_BURST_TYPE_L          (64),
		.PKT_CACHE_H               (92),
		.PKT_CACHE_L               (89),
		.PKT_THREAD_ID_H           (85),
		.PKT_THREAD_ID_L           (74),
		.PKT_BURST_SIZE_H          (63),
		.PKT_BURST_SIZE_L          (61),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (68),
		.PKT_PROTECTION_H          (88),
		.PKT_PROTECTION_L          (86),
		.PKT_BURSTWRAP_H           (60),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (70),
		.PKT_DEST_ID_H             (73),
		.PKT_DEST_ID_L             (72),
		.ST_DATA_W                 (98),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) encoder_0_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                          //       clk.clk
		.reset                 (Encoder_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (encoder_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (encoder_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (encoder_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (encoder_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (encoder_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (encoder_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (encoder_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (encoder_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (encoder_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (encoder_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (encoder_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (encoder_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (encoder_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (encoder_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (encoder_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (encoder_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (77),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (79),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (107),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_0_s1_agent (
		.clk                     (pll_0_outclk1_clk),                                         //             clk.clk
		.reset                   (sdram_controller_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (sdram_controller_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (108),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk1_clk),                                      //       clk.clk
		.reset             (sdram_controller_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk1_clk),                                    //       clk.clk
		.reset             (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) encoder_0_avalon_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                          //             clk.clk
		.reset                   (Encoder_0_reset_sink_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (encoder_0_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (encoder_0_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (encoder_0_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (encoder_0_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (encoder_0_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (encoder_0_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (encoder_0_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (encoder_0_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (encoder_0_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (encoder_0_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (encoder_0_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (encoder_0_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (encoder_0_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (encoder_0_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (encoder_0_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (encoder_0_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (encoder_0_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (encoder_0_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (encoder_0_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (encoder_0_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (encoder_0_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (encoder_0_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (encoder_0_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (encoder_0_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (encoder_0_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (encoder_0_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (encoder_0_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (encoder_0_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (encoder_0_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (encoder_0_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (encoder_0_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (encoder_0_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (encoder_0_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (encoder_0_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (encoder_0_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoder_0_avalon_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                       //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (encoder_0_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (encoder_0_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (encoder_0_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (encoder_0_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (encoder_0_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (encoder_0_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (encoder_0_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (encoder_0_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (encoder_0_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (encoder_0_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) encoder_0_avalon_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (encoder_0_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (encoder_0_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (encoder_0_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (encoder_0_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (encoder_0_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (encoder_0_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio_pio_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                //             clk.clk
		.reset                   (Encoder_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio_pio_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (gpio_pio_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (gpio_pio_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (gpio_pio_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (gpio_pio_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (gpio_pio_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (gpio_pio_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (gpio_pio_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (gpio_pio_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (gpio_pio_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (gpio_pio_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (gpio_pio_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (gpio_pio_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (gpio_pio_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (gpio_pio_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (gpio_pio_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (gpio_pio_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (gpio_pio_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (gpio_pio_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (gpio_pio_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (gpio_pio_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (gpio_pio_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (gpio_pio_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (gpio_pio_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (gpio_pio_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (gpio_pio_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (gpio_pio_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (gpio_pio_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (gpio_pio_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (gpio_pio_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (gpio_pio_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (gpio_pio_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (gpio_pio_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_pio_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (gpio_pio_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (gpio_pio_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (gpio_pio_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (gpio_pio_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (gpio_pio_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (gpio_pio_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (gpio_pio_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (gpio_pio_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (gpio_pio_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (gpio_pio_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_pio_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_pio_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (gpio_pio_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (gpio_pio_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (gpio_pio_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (gpio_pio_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (gpio_pio_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (124),
		.PKT_ORI_BURST_SIZE_L      (122),
		.PKT_RESPONSE_STATUS_H     (121),
		.PKT_RESPONSE_STATUS_L     (120),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (95),
		.PKT_PROTECTION_H          (115),
		.PKT_PROTECTION_L          (113),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (125),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_pio_s1_agent (
		.clk                     (pll_0_outclk0_clk),                                //             clk.clk
		.reset                   (Encoder_0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_pio_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (led_pio_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (led_pio_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (led_pio_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (led_pio_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (led_pio_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (led_pio_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (led_pio_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (led_pio_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (led_pio_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (led_pio_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (led_pio_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (led_pio_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (led_pio_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (led_pio_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (led_pio_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (led_pio_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (led_pio_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (led_pio_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (led_pio_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (led_pio_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (led_pio_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (led_pio_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (led_pio_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (led_pio_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (led_pio_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (led_pio_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (led_pio_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (led_pio_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (led_pio_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (led_pio_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (led_pio_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (led_pio_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_pio_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (led_pio_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (126),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (led_pio_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (led_pio_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (led_pio_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (led_pio_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (led_pio_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (led_pio_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (led_pio_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (led_pio_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (led_pio_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_pio_s1_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_pio_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (led_pio_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (led_pio_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (led_pio_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (led_pio_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (led_pio_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (encoder_0_avalon_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (encoder_0_avalon_master_agent_cp_valid),           //          .valid
		.sink_data          (encoder_0_avalon_master_agent_cp_data),            //          .data
		.sink_startofpacket (encoder_0_avalon_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (encoder_0_avalon_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sdram_controller_0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk1_clk),                                    //       clk.clk
		.reset              (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                 //       src.ready
		.src_valid          (router_003_src_valid),                                 //          .valid
		.src_data           (router_003_src_data),                                  //          .data
		.src_channel        (router_003_src_channel),                               //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (encoder_0_avalon_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (encoder_0_avalon_slave_agent_rp_valid),            //          .valid
		.sink_data          (encoder_0_avalon_slave_agent_rp_data),             //          .data
		.sink_startofpacket (encoder_0_avalon_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (encoder_0_avalon_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (gpio_pio_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (gpio_pio_s1_agent_rp_valid),                       //          .valid
		.sink_data          (gpio_pio_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (gpio_pio_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (gpio_pio_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (led_pio_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (led_pio_s1_agent_rp_valid),                        //          .valid
		.sink_data          (led_pio_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (led_pio_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (led_pio_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_wr_limiter (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_src_data),                                                  //          .data
		.cmd_sink_channel       (router_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (100),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (97),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_axi_master_rd_limiter (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                             //          .valid
		.cmd_sink_data          (router_001_src_data),                                              //          .data
		.cmd_sink_channel       (router_001_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (77),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (72),
		.PKT_BURST_SIZE_L          (70),
		.PKT_BURST_TYPE_H          (74),
		.PKT_BURST_TYPE_L          (73),
		.PKT_BURSTWRAP_H           (69),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (107),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (69),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_0_s1_burst_adapter (
		.clk                   (pll_0_outclk1_clk),                                         //       cr0.clk
		.reset                 (sdram_controller_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                         //          .ready
		.source0_valid         (sdram_controller_0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) encoder_0_avalon_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                          //       cr0.clk
		.reset                 (Encoder_0_reset_sink_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                      //          .ready
		.source0_valid         (encoder_0_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (encoder_0_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (encoder_0_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (encoder_0_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (encoder_0_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (encoder_0_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) gpio_pio_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                //       cr0.clk
		.reset                 (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                             //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                            //          .ready
		.source0_valid         (gpio_pio_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (gpio_pio_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (gpio_pio_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (gpio_pio_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (gpio_pio_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (gpio_pio_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (95),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (90),
		.PKT_BURST_SIZE_L          (88),
		.PKT_BURST_TYPE_H          (92),
		.PKT_BURST_TYPE_L          (91),
		.PKT_BURSTWRAP_H           (87),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (87),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) led_pio_s1_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                //       cr0.clk
		.reset                 (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                             //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                            //          .ready
		.source0_valid         (led_pio_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (led_pio_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (led_pio_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (led_pio_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (led_pio_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (led_pio_s1_burst_adapter_source0_ready)            //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (pll_0_outclk0_clk),                                                //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                       //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                             //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                             //           .valid
		.src2_data          (cmd_demux_src2_data),                                              //           .data
		.src2_channel       (cmd_demux_src2_channel),                                           //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                       //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                             //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                             //           .valid
		.src3_data          (cmd_demux_src3_data),                                              //           .data
		.src3_channel       (cmd_demux_src3_channel),                                           //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                        //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (pll_0_outclk0_clk),                                                //        clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                         //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                   //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                         //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                         //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                          //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                       //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                   //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                         //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                         //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                          //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                       //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                   //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                         //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                         //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                          //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                       //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                                    //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_002_src0_data),                          //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk1_clk),                                    //       clk.clk
		.reset               (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_src_valid),                                    //          .valid
		.src_data            (cmd_mux_src_data),                                     //          .data
		.src_channel         (cmd_mux_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                              //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                //          .valid
		.sink1_channel       (crosser_001_out_channel),                              //          .channel
		.sink1_data          (crosser_001_out_data),                                 //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                //          .valid
		.sink2_channel       (crosser_002_out_channel),                              //          .channel
		.sink2_data          (crosser_002_out_data),                                 //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                //       clk.clk
		.reset               (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                //       clk.clk
		.reset               (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                                //       clk.clk
		.reset               (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_outclk1_clk),                                    //       clk.clk
		.reset              (sdram_controller_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                 //      sink.ready
		.sink_channel       (router_003_src_channel),                               //          .channel
		.sink_data          (router_003_src_data),                                  //          .data
		.sink_startofpacket (router_003_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_003_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                           //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                 //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                 //          .valid
		.src1_data          (rsp_demux_src1_data),                                  //          .data
		.src1_channel       (rsp_demux_src1_channel),                               //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                         //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                           //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                 //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                 //          .valid
		.src2_data          (rsp_demux_src2_data),                                  //          .data
		.src2_channel       (rsp_demux_src2_channel),                               //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                         //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_002_src1_data),                          //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_003_src1_data),                          //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                            //          .valid
		.sink0_channel       (crosser_003_out_channel),                                          //          .channel
		.sink0_data          (crosser_003_out_data),                                             //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                            //          .valid
		.sink0_channel       (crosser_004_out_channel),                                          //          .channel
		.sink0_data          (crosser_004_out_data),                                             //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                                      //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                       //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                         //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                       //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                          //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                         //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                       //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                          //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                //       clk.clk
		.reset               (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //          .valid
		.src_data            (rsp_mux_002_src_data),                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                            //          .valid
		.sink0_channel       (crosser_005_out_channel),                          //          .channel
		.sink0_data          (crosser_005_out_data),                             //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src0_data),                                                                  //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (87),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (90),
		.IN_PKT_BURST_SIZE_L           (88),
		.IN_PKT_RESPONSE_STATUS_H      (121),
		.IN_PKT_RESPONSE_STATUS_L      (120),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (92),
		.IN_PKT_BURST_TYPE_L           (91),
		.IN_PKT_ORI_BURST_SIZE_L       (122),
		.IN_PKT_ORI_BURST_SIZE_H       (124),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                             //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                           //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                             //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                              //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (60),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (63),
		.IN_PKT_BURST_SIZE_L           (61),
		.IN_PKT_RESPONSE_STATUS_H      (94),
		.IN_PKT_RESPONSE_STATUS_L      (93),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (65),
		.IN_PKT_BURST_TYPE_L           (64),
		.IN_PKT_ORI_BURST_SIZE_L       (95),
		.IN_PKT_ORI_BURST_SIZE_H       (97),
		.IN_ST_DATA_W                  (98),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (72),
		.OUT_PKT_BURST_SIZE_L          (70),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (74),
		.OUT_PKT_BURST_TYPE_L          (73),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_ST_DATA_W                 (107),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                    //       clk.clk
		.reset                (Encoder_0_reset_sink_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                             //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                           //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                             //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                              //          .data
		.out_endofpacket      (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                                                    //       clk.clk
		.reset                (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                 //          .ready
		.in_data              (rsp_demux_src0_data),                                                                  //          .data
		.out_endofpacket      (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (90),
		.OUT_PKT_BURST_SIZE_L          (88),
		.OUT_PKT_RESPONSE_STATUS_H     (121),
		.OUT_PKT_RESPONSE_STATUS_L     (120),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (92),
		.OUT_PKT_BURST_TYPE_L          (91),
		.OUT_PKT_ORI_BURST_SIZE_L      (122),
		.OUT_PKT_ORI_BURST_SIZE_H      (124),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                                                    //       clk.clk
		.reset                (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                                 //          .ready
		.in_data              (rsp_demux_src1_data),                                                                  //          .data
		.out_endofpacket      (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (69),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (72),
		.IN_PKT_BURST_SIZE_L           (70),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (74),
		.IN_PKT_BURST_TYPE_L           (73),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_ST_DATA_W                  (107),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (63),
		.OUT_PKT_BURST_SIZE_L          (61),
		.OUT_PKT_RESPONSE_STATUS_H     (94),
		.OUT_PKT_RESPONSE_STATUS_L     (93),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (65),
		.OUT_PKT_BURST_TYPE_L          (64),
		.OUT_PKT_ORI_BURST_SIZE_L      (95),
		.OUT_PKT_ORI_BURST_SIZE_H      (97),
		.OUT_ST_DATA_W                 (98),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter (
		.clk                  (pll_0_outclk1_clk),                                                                    //       clk.clk
		.reset                (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src2_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_src2_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_src2_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_src2_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_src2_ready),                                                                 //          .ready
		.in_data              (rsp_demux_src2_data),                                                                  //          .data
		.out_endofpacket      (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_0_outclk0_clk),                                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                                                    //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // out_clk_reset.reset
		.in_ready          (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (hps_0_h2f_axi_master_wr_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_out_ready),                                                                    //           out.ready
		.out_valid         (crosser_out_valid),                                                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                                                  //              .channel
		.out_data          (crosser_out_data),                                                                     //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_0_outclk0_clk),                                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                                                    //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // out_clk_reset.reset
		.in_ready          (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (hps_0_h2f_axi_master_rd_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_001_out_ready),                                                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                                              //              .channel
		.out_data          (crosser_001_out_data),                                                                 //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (107),
		.BITS_PER_SYMBOL     (107),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (pll_0_outclk0_clk),                                                                    //        in_clk.clk
		.in_reset          (Encoder_0_reset_sink_reset_bridge_in_reset_reset),                                     //  in_clk_reset.reset
		.out_clk           (pll_0_outclk1_clk),                                                                    //       out_clk.clk
		.out_reset         (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 // out_clk_reset.reset
		.in_ready          (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_ready),         //            in.ready
		.in_valid          (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_channel),       //              .channel
		.in_data           (encoder_0_avalon_master_to_sdram_controller_0_s1_cmd_width_adapter_src_data),          //              .data
		.out_ready         (crosser_002_out_ready),                                                                //           out.ready
		.out_valid         (crosser_002_out_valid),                                                                //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                                        //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                                          //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                                              //              .channel
		.out_data          (crosser_002_out_data),                                                                 //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_0_outclk1_clk),                                                                    //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_controller_0_s1_to_hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_003_out_ready),                                                                //           out.ready
		.out_valid         (crosser_003_out_valid),                                                                //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                                        //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                                          //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                                              //              .channel
		.out_data          (crosser_003_out_data),                                                                 //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_0_outclk1_clk),                                                                    //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_controller_0_s1_to_hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_004_out_ready),                                                                //           out.ready
		.out_valid         (crosser_004_out_valid),                                                                //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                                        //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                                          //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                                              //              .channel
		.out_data          (crosser_004_out_data),                                                                 //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (98),
		.BITS_PER_SYMBOL     (98),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_0_outclk1_clk),                                                                    //        in_clk.clk
		.in_reset          (sdram_controller_0_reset_reset_bridge_in_reset_reset),                                 //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                                                                    //       out_clk.clk
		.out_reset         (Encoder_0_reset_sink_reset_bridge_in_reset_reset),                                     // out_clk_reset.reset
		.in_ready          (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_ready),         //            in.ready
		.in_valid          (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_valid),         //              .valid
		.in_startofpacket  (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_startofpacket), //              .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_endofpacket),   //              .endofpacket
		.in_channel        (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_channel),       //              .channel
		.in_data           (sdram_controller_0_s1_to_encoder_0_avalon_master_rsp_width_adapter_src_data),          //              .data
		.out_ready         (crosser_005_out_ready),                                                                //           out.ready
		.out_valid         (crosser_005_out_valid),                                                                //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                                        //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                                          //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                                              //              .channel
		.out_data          (crosser_005_out_data),                                                                 //              .data
		.in_empty          (1'b0),                                                                                 //   (terminated)
		.in_error          (1'b0),                                                                                 //   (terminated)
		.out_empty         (),                                                                                     //   (terminated)
		.out_error         ()                                                                                      //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk1_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (Encoder_0_reset_sink_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (encoder_0_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (encoder_0_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (encoder_0_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio_pio_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (gpio_pio_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (gpio_pio_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                // in_clk_0.clk
		.in_rst_0_reset (Encoder_0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_pio_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (led_pio_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (led_pio_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

endmodule
